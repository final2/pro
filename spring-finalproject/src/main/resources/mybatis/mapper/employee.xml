<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.finalproject.dao.EmployeeDao">
	
	<!-- 로그인 체크하기 -->
	<select id="loginByNo" parameterType="int" resultType="Employee">
		select 
			no, 
			name, 
			phone, 
			email, 
			address, 
			to_date(birth, 'yyyy-MM-dd') 	as birth,  
			department 	as dept, 
			position, 
			salary, 
			photo, 
			hiredate 	as hireDate, 
			password, 
			retiredate	as retireDate, 
			remarks
		from employee
		where no = #{no}
	</select>
	
	<!-- 로그인 상태 표시 -->
	<update id="loginStateByNo" parameterType="int">
		update employee
		set
			loginstate = 'Y'
		where no = #{no}
	</update>
	
	<!-- 로그아웃 상태 표시 -->
	<update id="logoutstateByNo" parameterType="int">
		update employee
		set
			loginstate = 'N'
		where no = #{no}
	</update>
	
	<!-- 현재 사원번호 확인하기 -->
	<select id="empSeqCheck" resultType="int">
		select my_seq.nextval from dual
	</select>
	
	<!-- 사원등록 -->
	<insert id="insertEmployee" parameterType="Employee">
		insert into employee (no, name, phone, email, address, birth, department, position, salary, photo, hiredate, password, retiredate, remarks )
		values (#{no}, #{name}, #{phone}, #{email}, #{address}, to_char(#{birth}, 'yyyy-mm-dd'), #{dept}, #{position}, #{salary}, #{photo}, sysdate, #{password}, null, '-')
	</insert>
	
	<!-- 사원등록 시 학력 정보 등록 -->
	<insert id="insertAddCareer" parameterType="Career">
		insert into career (no, school, major, employee_no)
		<!-- values (myempopt_seq.nextval, #{school}, #{major}, #{empNo}) -->
		values (myempopt_seq.nextval, #{school}, #{major}, #{empNo} )
	</insert>
	
	<!-- 사원등록 시 자격증 정보 등록 -->
	<insert id="insertAddLicenses" parameterType="Licenses">
		insert into licenses (no, license, license_office, employee_no)
		values (myempopt_seq.nextval, #{license}, #{licenseOffice}, #{empNo}) 
	</insert>
	
	<!-- 사원등록 시 어학능력 정보 등록 -->
	<insert id="insertAddLanguages" parameterType="Languages">
		insert into languages (no, language, grade, employee_no)
		values (myempopt_seq.nextval, #{language}, #{grade}, #{empNo})
	</insert>
		
	<!-- 사원번호로 기본급 및 근태 조회 -->
	<select id="getEmpWorkTimeByNo" parameterType="Criteria" resultType="WorkTime">
		select
			no,
			attendance,
			leaving,
			late,
			earlyleave,
			overtime,
			regdate			as regDate,
			employee_no		as "emp.no",
			emp_name 		as "emp.name",
			emp_dept		as "emp.dept",
			emp_salary		as "emp.salary"
		from (
			select
				T.no,
				T.attendance,
				T.leaving,
				T.late,
				T.earlyleave,
				T.overtime,
				T.regdate,
				T.employee_no,
				E.name				as emp_name,
				E.department		as emp_dept,
				E.salary			as emp_salary
			from
				timetable T, employee E
			where 
				T.employee_no = E.no
			and 
				E.no = #{empNo}
		)
		where
			attendance >= to_date(#{beginDate}, 'yyyy-MM-dd') and attendance &lt; to_date(#{endDate}, 'yyyy-MM-dd')
	</select>
		
	<!-- 사원 급여 등록 -->
	<insert id="insertSalary" parameterType="AccountBook">
		insert into accountbook (no, paymentdate, salary, overtime, insure_health, insure_longhealth, insure_social, employee_insure, employee_no)
		values (my_seq.nextval, #{paymentDate}, #{salary}, #{overtime}, #{insureHealth}, #{insureLonghealth}, #{insureSocial}, #{employeeInsure}, #{emp.no})
	</insert>
	
	<!-- 모든 사원 조회하기 -->
	<select id="getAllEmployees" resultType="Employee">
		select 
			no, 
			name, 
			department 	as dept, 
			position,
			remarks
		from employee
		where rowid in( select max(rowid) from employee group by department )
	</select>
	
	<!-- 모든 사원 조회하기 -->
	<select id="getEmployees" parameterType="Criteria" resultType="Employee">
		select 
			no, 
			name, 
			dept, 
			position,
			remarks
		from (
			select
				row_number() over (order by no desc) rn,
				no, 
				name,
				department  as dept,
				position,
				remarks
			from	
				employee
		)
		where
			rn >= #{beginIndex} and rn &lt;= #{endIndex}
			<if test="opt != null and keyword != null">
				<if test="opt == 'empName'">
					and name like '%' || #{keyword} || '%'
				</if>
				<if test="opt == 'department'">
					and dept like '%' || #{keyword} || '%'
				</if>
				<if test="opt == 'position'">
					and position like '%' || #{keyword} || '%'
				</if>
			</if> 
	</select>
	
	<!-- 모든 사원 조회(카운트) -->
	<select id="getTotalEmpRows" parameterType="Criteria" resultType="int">
		select count(*)
		from employee
		<where>
			<if test="opt != null and keyword != null">
				<if test="opt == 'empName'">
					name like '%' || #{keyword} || '%'
				</if>
				<if test="opt == 'department'">
					department like '%' || #{keyword} || '%'
				</if>
				<if test="opt == 'position'">
					and position like '%' || #{keyword} || '%'
				</if>
			</if>
		</where>
	</select>

	<!-- 사원번호로 사원정보 가져오기 -->
	<select id="getEmployeeByNo" parameterType="int" resultType="Employee">
		select 
			no, 
			name, 
			phone, 
			email, 
			address, 
			to_date(birth, 'yyyy-MM-dd') 	as birth, 
			department 						as dept, 
			position, 
			photo, 
			salary,
			retiredate						as retireDate, 
			hiredate						as hireDate,
			remarks
		from employee
		where no = #{no}
	</select>
	
	<!-- 사원번호로 근무지점 조회하기 -->
	<select id="getBranchListByNo" parameterType="int" resultType="Branch">
		select 
			B.name
		from employee E, branch B
		where E.no = B.employee_no
		and E.no = #{no}
	</select>
	
	<!-- 사원번호 학력 조회하기 -->
	<select id="getCareerListByNo" parameterType="int" resultType="Career">
		select
			no,
			school,
			major,
			employee_no		as empNo,
			term
		from career
		where employee_no = #{empNo}
		order by term desc
	</select>
	
	<!-- 사원번호 자격증 조회하기 -->
	<select id="getLicenseListByNo" parameterType="int" resultType="Licenses">
		select
			no,
			license,
			license_office	as licenseOffice,
			employee_no		as empNo
		from licenses
		where employee_no = #{empNo}	
		order by no		
	</select>
	
	<!-- 사원번호 어학능력 조회하기 -->
	<select id="getLanguageListByNo" parameterType="int" resultType="Languages">
		select
			no,
			language,
			grade,
			employee_no		as empNo
		from languages
		where employee_no = #{empNo}
		order by no desc
	</select>
	
	<!-- 사원정보 수정하기 -->
	<!-- 기본정보 수정-->
	<update id="updateEmployee" parameterType="Employee">
		update employee
		set
			password 	= #{password},
			phone 		= #{phone},
			address 	= #{address},
			email		= #{email},
			department	= #{dept},
			position	= #{position},
			photo 		= #{photo},
			salary		= #{salary},
			retiredate	= #{retiredate},
			remarks		= #{remarks}
		where
			no = #{no}
	</update>
	
	<update id="updateEmployeePwd" parameterType="Employee">
		update employee
		set
			password 	= #{password}
		where
			no = #{no}
	</update>
	<!-- 학력 수정-->
	<update id="updateCareer" parameterType="Career">
		update career
		set
			school		= #{school},
			major		= #{major},
		where
			employee_no	= #{empNo}
	</update>
	<!-- 자격증 수정 -->
	<update id="updateLicenses" parameterType="Licenses">
		update career
		set
			license			= #{license},
			license_office	= #{licenseOffice},
		where
			employee_no	= #{empNo}
	</update>
	<!-- 어학능력 수정 -->
	<update id="updateLanguages" parameterType="Languages">
		update career
		set
			language	= #{language},
			grade		= #{grade},
		where
			employee_no	= #{empNo}
	</update>
	
	<!-- 급여대장 조회하기 -->
	<select id="getAccountBooks" parameterType="Criteria" resultType="AccountBook">
		select
			no,
			paymentdate 		as paymentDate,
			salary,
			overtime,
			insure_health		as insureHealth,
			insure_longhealth	as insureLonghealth,
			insure_social		as insureSocial,
			employee_insure		as employeeInsure,
			empNo				as "emp.no",		
			empName				as "emp.name",
			dept				as "emp.dept"
		from (
			select     
				row_number() over (order by A.paymentdate desc) rn,     
				A.no,     
				A.paymentdate,     
				A.salary,     
				A.overtime,    
				A.insure_health,     
				A.insure_longhealth,     
				A.insure_social,     
				A.employee_insure,     
				A.employee_no   as empNo,    
				E.department   as dept,     E.name     as empName   
 			from      
 				accountbook A, employee E     
			where      
				A.employee_no = E.no  
		)
		where
			rn >= #{beginIndex} and rn &lt;= #{endIndex}
			<if test="opt != null and keyword != null">
				<if test="opt == 'name'">
					and name like '%' || #{keyword} || '%'
				</if>
				<if test="opt == 'paymentDate'">
					and paymentDate = #{keyword}
				</if>
				<if test="opt == 'dept'">
					and dept like '%' || #{keyword} || '%'
				</if>
			</if>
	</select>
	
	
	<!-- 급여 리스트 갯수 조회  -->
	<select id="getTotalSalaryRows" parameterType="Criteria" resultType="int">
		select count(*)
		from accountbook A, employee E
		<where>
			<if test="opt != null and keyword != null">
				<if test="opt == 'name'">
					and A.employee_no = E.no
					and E.name like '%' || #{keyword} || '%'
				</if>
				<if test="opt == 'paymentDate'">
					and A.employee_no = E.no
					and A.paymentdate = #{keyword}
				</if>
				<if test="opt == 'dept'">
					and A.employee_no = E.no
					and E.department like '%' || #{keyword} || '%'
				</if>
			</if>
		</where>
	</select>
	
	<!-- 부서이름으로 해당사원 조회 -->
	<select id="getEmployeeByDept" parameterType="string" resultType="Employee">
		select
			no, name, salary
		from
			employee
		where department = #{dept}
	</select>
	
	<!-- 근태리스트 조회 -->
	<select id="getTimetable" parameterType="Criteria" resultType="WorkTime">
		select
			no,
			attendance,
			leaving,
			late,
			earlyleave,
			overtime,
			regdate			as regDate,
			employee_no		as "emp.no",
			emp_name 		as "emp.name",
			emp_dept		as "emp.dept"
		from (
			select
				row_number() over (order by T.no desc) rn,
				T.no,
				T.attendance,
				T.leaving,
				T.late,
				T.earlyleave,
				T.overtime,
				T.regdate,
				T.employee_no,
				E.name				as emp_name,
				E.department		as emp_dept
			from
				timetable T, employee E
			where 
				T.employee_no = E.no
		)
		where
			rn >= #{beginIndex} and rn &lt;= #{endIndex}
			<if test="opt != null and keyword != null">
				<if test="opt == 'dept'">
					and T.emloyee_no = E.no
					and E.department = #{dept}
				</if>
				<if test="opt == 'name'">
					and T.employee_no = E.no
					and E.name = #{name}
				</if>
				<if test="opt == 'service_date">
					and T.employee_no = E.no
					and T.regdate = #{regDate}
				</if>
			</if>
	</select>
	
	<!-- 근태리스트 조회 -->
	<select id="getTimetableByNo" parameterType="Criteria" resultType="WorkTime">
		select
			no,
			attendance,
			leaving,
			late,
			earlyleave,
			overtime,
			regdate			as regDate,
			employee_no		as "emp.no",
			emp_name 		as "emp.name",
			emp_dept		as "emp.dept"
		from (
			select
				T.no,
				T.attendance,
				T.leaving,
				T.late,
				T.earlyleave,
				T.overtime,
				T.regdate,
				T.employee_no,
				E.name				as emp_name,
				E.department		as emp_dept
			from
				timetable T, employee E
			where 
				T.employee_no = E.no
			and 
				E.no = #{empNo}
		)
		where
			attendance >= to_date(#{beginDate}, 'yyyy-MM-dd') and attendance &lt; to_date(#{endDate}, 'yyyy-MM-dd')
	</select>
	<!-- 근태리스트 갯수 조회 -->
	<select id="getTotalTimetablerows" parameterType="Criteria" resultType="int">
		select count(*)
		from timetable T, employee E
		<where>
			<if test="opt != null and keyword != null">
				<if test="opt == 'dept'">
					T.emloyee_no = E.no
					and E.department = #{dept}
				</if>
				<if test="opt == 'name'">
					T.employee_no = E.no
					and E.name = #{name}
				</if>
				<if test="opt == 'service_date">
					T.employee_no = E.no
					and T.regdate = #{regDate}
				</if>
			</if>
		</where>
	</select>
	<!-- 출근 시간 기록하기 -->
	<insert id="attendanceByNo" parameterType="WorkTime">
		insert into timetable (no, employee_no, attendance)
		values (my_seq.nextval, #{emp.no}, sysdate)
	</insert>
	<!-- 출근 시간 가져오기 -->
	<select id="getAttendanceByNo" parameterType="int" resultType="WorkTime">
		select
			no,  
			attendance
		from timetable
		where employee_no = #{emp.no}
		and to_char(attendance, 'yyyymmdd') = to_char(sysdate, 'yyyymmdd')
	</select>
	
	<!-- 퇴근 시간 기록하기 -->
	<update id="leavByNo" parameterType="WorkTime">
		update timetable
		set
			leaving		= #{leaving},
			late		= #{late},
			earlyleave	= #{earlyleave},
			overtime	= #{overtime},
			regdate		= sysdate
		where employee_no = #{emp.no}
		and to_char(attendance, 'yyyymmdd') = to_char(sysdate, 'yyyymmdd')
	</update>
	
	<!-- 지점 등록 -->
	<insert id="insertBranch" parameterType="Branch">
		insert into branch (no, name, phone, address, atm, freshfood, lotto, parcelservice, lifeservice, image, employee_no )
		values(my_seq.nextval, #{name}, #{phone}, #{address}, #{atm}, #{freshFood}, #{lotto}, #{parcelService}, #{lifeService}, #{img}, #{emp.no})
	</insert>
	
	<!-- 모든 지점 조회 -->
	<select id="getAllBranch" resultType="Branch">
		select no, name
		from branch		
		order by no desc
	</select>
	
	<!-- 모든 지점 조회 -->
	<select id="getBranch" parameterType="Criteria" resultType="Branch">
		select no, name, address, phone, manager_name "emp.name", manager_no "emp.no", manager_phone "emp.phone"
		from (
			select
				row_number() over (order by B.no desc) rn,
				B.no,
				B.name ,
				B.address,
				B.phone,
				E.name 		as manager_name,
				E.no 		as manager_no,
				E.phone 	as manager_phone
			from
				branch B, employee E 
			where 
				B.employee_no = E.no
		)		
		where
			rn >= #{beginIndex} and rn &lt;= #{endIndex}
			<if test="opt == 'branch'">
				and name like '%' || #{keyword} || '%'
			</if>
			<if test="opt == 'address'">
				and address like '%' || #{keyword} || '%'
			</if>
			<if test="opt == 'manager'">
				and manager_name like '%' || #{keyword} || '%'
			</if>
	</select>
	
	<!-- 모든 지점 조회 (카운트) -->
	<select id="getTotalBranchRows" parameterType="Criteria" resultType="int">
		select count(*)
		from branch B, employee E
		<where>
			<if test="opt != null and keyword != null">
				<if test="opt == 'branch'">
					B.employee_no = E.no
					and B.name like '%' || #{keyword} || '%'
				</if>
				<if test="opt == 'manager'">
					B.employee_no = E.no
					and E.name like '%' || #{keyword} || '%'
				</if>
				<if test="opt == 'address'">
					B.employee_no = E.no
					and B.address like '%' || #{keyword} || '%'
				</if>
			</if>
		</where>
	</select>
	
	<!-- 모든 지점 리스트 -->
	<select id="getAllBranchByEmp" resultType="Branch">
		select 
			B.no, 
			B.name, 
			B.phone, 
			B.address, 
			B.atm, 
			B.freshfood			as freshFood, 
			B.lotto, 
			B.parcelservice		as parcelService, 
			B.lifeservice		as lifeService, 
			B.employee_no		as "emp.no", 
			B.image				as img,
			E.name				as "emp.name",
			E.phone				as "emp.phone"
		from employee E, branch B
		where E.no = B.employee_no
		order by B.no desc
	</select>
	
	<!-- 담당자와 모든 지점 리스트 -->
	<select id="getBranchByBranchNo" parameterType="int" resultType="Branch">
		select 
			B.no, 
			B.name, 
			B.phone, 
			B.address, 
			B.atm, 
			B.freshfood			as freshFood, 
			B.lotto, 
			B.parcelservice		as parcelService, 
			B.lifeservice		as lifeService, 
			B.employee_no		as "emp.no", 
			B.image				as img,
			E.name				as "emp.name",
			E.phone				as "emp.phone"
		from employee E, branch B
		where E.no = B.employee_no
		and B.no = #{no}
	</select>
	
	<!-- 지점정보 수정 -->
	<update id="updateBranch" parameterType="Branch">
		update branch
		set
			name			= #{name}, 
			phone			= #{phone}, 
			address			= #{address}, 
			atm				= #{atm}, 
			freshfood		= #{freshFood}, 
			lotto			= #{lotto}, 
			parcelservice	= #{parcelService}, 
			lifeservice		= #{lifeService}, 
			image			= #{img},
			employee_no		= #{emp.no} 
		where no = #{no}
	</update>
	
	<!-- 지점사원 등록 -->
	<insert id="insertBranchEmp" parameterType="BranchEmp">
		insert into br_employees (no, phone, grade, password, name, retiredate, branch_no, images, birth, email, address )
		values ("my_seq.nextval, #{phone}, #{grade}, #{password}, #{name}, sysdate, #{branch.no}, #{images}, #{birth}, #{email}, #{address})
	</insert>
	
	<!-- 지점번호로 지점 사원조회 -->
	<select id="getBranchEmpByNo" parameterType="int" resultType="BranchEmp">
		select
			E.no,
			E.phone,
			E.grade,
			E.password,
			E.name,
			E.retiredate		as retireDate,
			E.images,
			E.birth,
			E.email,
			E.address
		from br_employees E, branch B 
		where E.branch_no = B.no
		and B.no = #{no}
	</select>
	
	<!-- 지점사원번호로 지점사원 조회 -->
	<select id="getBranchEmpByBrEmpNo" parameterType="int" resultType="BranchEmp">
		select
			E.no,
			E.phone,
			E.grade,
			E.password,
			E.name,
			E.retiredate		as retireDate,
			E.images,
			E.birth,
			E.email,
			E.address,
			E.branch_no			as "branch.no",
			B.name				as "branch.name"
		from br_employees E, branch B 
		where E.branch_no = B.no
		and E.no = #{no}
	</select>
	
	<!-- 지점사원번호로 지점사원 근무상태수정 -->
	<update id="updateBranchEmpByBrempNo" parameterType="BranchEmp">
		update br_employee
		set
			remarks = #{
	</update>
	
</mapper>