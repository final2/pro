<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.finalproject.dao.BranchDao">

	<!-- 지점회원번호로 지점회원 찾기 -->
	<select id="getBrMemberByNo" parameterType="int" resultType="BranchEmp">
		select 
			A.no, 
			A.email, 
			A.address, 
			A.phone, 
			A.grade, 
			A.password, 
			A.name, 
			A.retiredate, 
			A.branch_no as "branch.no", 
			B.name as "branch.name",
			A.images, 
			A.birth
		from 
			br_employees A, branch B
		where
			A.branch_no = B.no
		and 
			A.no = #{value}
	</select>
	
	<!-- 판매 : 대분류 찾기 -->
	<select id="getAllLargeCats" resultType="LC">
		select 
			no, name
		from
			largecategory
	</select>
	
	<!-- 판매 : 대분류 찾기(지점별, 재고에 있는 물품별) -->
	<select id="getAllLargeCatsByBranch" resultType="LC">
		select 
			distinct(D.no)
		from
			branch_inventory A, product B, smallcategory C, largecategory D
		where
			A.product_no = B.no
		and
			B.smallcategory_no = C.no
		and
			C.largecategory_no = D.no
		and
			A.branch_no = #{value}
	</select>
	
	<!-- 판매 : 소분류 찾기 -->
	<select id="getSmallCatsByLargeNo" parameterType="int" resultType="SC">
		select
			no, name, largecategory_no as largeCat
		from
			smallcategory
		where 
			largecategory_no = #{value}
	</select>
	
	<!-- 판매 : 물품 찾기 -->
	<select id="getProductsBySmallNo" parameterType="int" resultType="Product">
		select
			no, name, maker, price, smallcategory_no as smallCat
		from
			product
		where 
			smallcategory_no = #{value}
	</select>
	
	<!-- 판매 : 물품번호로 재고 조회하기 -->
	<select id="getBranchInvenByProductNo" parameterType="map" resultType="com.finalproject.model.BranchInventory">
		select
			no, qty, branch_no as "branchNo", product_no as "product.no"
		from 
			branch_inventory
		where 
			branch_no = #{branchNo}
		and
			product_no = #{productNo}
	</select>
	
	<!-- 발주 : 발주대기 주문 상세 찾기 -->
	<select id="getWaitingOrderDetail" parameterType="int" resultType="com.finalproject.model.BranchOrderDetail">
		select
			A.no, 
			A.qty, 
			A.warehousein, 
			A.warehouseout, 
			A.order_no as "order.no", 
			A.product_no as "product.no",
			B.name as "product.name",
			B.maker as "product.maker",
			B.price as "product.price",
			C.branch_no as "order.branchNo"
		from
			br_order_details A, product B, br_orders C
		where 
			A.product_no = B.no
		and
			A.order_no = C.no
		and
			C.iscart = 'N'
		and 
			C.branch_no = #{value}
	</select>
	
	<!-- 발주 : 발주대기 목록에서 삭제하기 -->
	<delete id="deleteWaitingByOrderDetailNo" parameterType="int">
		delete from br_order_details
		where no = #{value}
	</delete>
	
	<!-- 발주 : 지점 재고에 물품 추가하기 -->
	<insert id="addInventory" parameterType="com.finalproject.model.BranchInventory">
		insert into 
			branch_inventory(no, qty, branch_no, product_no)
		values
			(mybranch_seq.nextval, #{qty}, #{branchNo}, #{product.no})
	</insert>
	
	<!-- 발주 : 주문번호로 발주 찾기 -->
	<select id="getBranchOrderByNo" parameterType="int" resultType="BrOrder">
		select
			no,
			regdate,
			note,
			branch_no as "branchNo",
			iscomplete,
			iscart
		from
			br_orders
		where
			no = #{value}
	</select>
	
	<!-- 발주 : 주문상세번호로 주문상세 찾기 -->
	<select id="getOrderDetailByNo" parameterType="int" resultType="com.finalproject.model.BranchOrderDetail">
		select 
			no, qty, order_no as "order.no", product_no as "product.no"
		from
			br_order_details
		where
			no = #{value}
	</select>
	
	<!-- 발주 : 발주 수정하기 -->
	<update id="updateBranchOrder" parameterType="BrOrder">
		update
			br_orders
		set
			iscomplete = #{iscomplete},
			iscart = #{iscart}
		where
			no = #{no}
	</update>
	
	<!-- 발주 : 물품번호로 재고찾기 -->
	<select id="getInventoryByProductNo" parameterType="int" resultType="com.finalproject.model.BranchInventory">
		select
			 no, qty, branch_no as "branchNo", product_no as "product.no"
		from 
			branch_inventory
		where 
			product_no = #{value}
	</select>
	
	<!-- 발주 : 재고 수정하기 -->
	<update id="updateInventory" parameterType="com.finalproject.model.BranchInventory">
		update
			branch_inventory
		set
			qty = #{qty},
			branch_no = #{branchNo}
		where
			product_no = #{product.no}
	</update>
	
	<!-- 재고 : 지점번호로 재고 조회하기 -->
	<select id="getAllInvenByBranchNo" parameterType="int" resultType="com.finalproject.model.BranchInventory">
		select
			A.no, 
			A.qty, 
			A.branch_no as "branchNo", 
			A.product_no as "product.no",
			B.name as "product.name"
		from 
			branch_inventory A, product B
		where 
			A.product_no = B.no
		and
			A.branch_no = #{value}
		and 
			qty &lt;= 100
		order by
			qty asc
	</select>
	
	<!-- 재고 : 발주 추가하기 -->
	<insert id="addOrder" parameterType="BrOrder">
		insert into br_orders(no, regdate, branch_no, iscomplete, iscart)
		values(mybranch_seq.nextval, sysdate, #{branchNo}, 'N', 'N')
	</insert>
	
	<!-- 재고 : 발주 상세 추가하기 -->
	<insert id="addOrderDetail" parameterType="com.finalproject.model.BranchOrderDetail">
		insert into br_order_details(no, qty, order_no, product_no)
		values(mybranch_seq.nextval, #{qty}, #{order.no}, #{product.no})
	</insert>
	
	<select id="getOrderDetailByProNo" parameterType="map" resultType="com.finalproject.model.BranchOrderDetail">
		select
			A.no, 
			A.qty, 
			A.warehousein, 
			A.warehouseout, 
			A.order_no as "order.no", 
			A.product_no as "product.no",
			B.name as "product.name",
			B.maker as "product.maker",
			B.price as "product.price",
			C.branch_no as "order.branchNo"
		from
			br_order_details A, product B, br_orders C
		where 
			A.product_no = B.no
		and
			A.order_no = C.no
		and
			C.iscart = 'N'
		and 
			C.branch_no = #{branchNo}
		and 
			A.product_no = #{productNo}
	</select>
	
	<update id="updateBranchOrderDetail" parameterType="com.finalproject.model.BranchOrderDetail">
		update
			br_order_details
		set
			qty = #{qty}
		where
			no = #{no}
	</update>
	
	<select id="getProductByNo" parameterType="int" resultType="Product">
		select 
			no, name, maker, price, memo, limiteage as "limiteAge", eventcode "event.no", smallcategory_no as "smallCat.no", image
		from 
			product
		where 
			no = #{value}
	</select>
	
	<select id="getAllProductsFromCompany" resultType="Product">
		select 
			no, name, maker, price, memo, limiteage as "limiteAge", eventcode "event.no", smallcategory_no as "smallCat.no", image
		from 
			product
	</select>
	
	<select id="getBranchOrderByIsCartNo" parameterType="int" resultType="BrOrder">
		select
			no,
			regdate,
			note,
			branch_no as "branch.no",
			iscomplete,
			iscart
		from
			br_orders
		where
			iscart = 'N'
		and
			branch_no = #{value}
	</select>
	
	<select id="getInvenByKeyword" parameterType="map" resultType="com.finalproject.model.BranchInventory">
		select
			 A.no, 
			 A.qty, 
			 A.branch_no as "branchNo", 
			 A.product_no as "product.no",
			 B.name as "product.name",
			 C.name as "product.smallCat.name"
		from 
			branch_inventory A, product B, smallcategory C
		where 
			A.product_no = B.no
		and
			B.smallcategory_no = C.no
		and
			A.branch_no = #{branchNo}
			<if test="type == 'name'">
			and B.name like '%' || #{keyword} || '%'	
			</if>
			<if test="type == 'qty'">
			and A.qty &lt;= #{keyword}
			</if>
			<if test="type == 'cat'">
			and C.name like '%' || #{keyword} || '%'
			</if>
		order by
			B.name		
	</select>
	
	<!-- 발주 : 발주내역 조회하기 -->
	<select id="getOrdersByBranchNo" parameterType="int" resultType="BrOrder">
		select
			no, regdate, note, branch_no as "branch.no", iscomplete, iscart
		from
			br_orders
		where
			branch_no = #{value}
		and
			iscart = 'Y'
		order by regdate desc	
	</select>
	
	<select id="getOrderDetailsByOrderNo" parameterType="int" resultType="com.finalproject.model.BranchOrderDetail">
		select
			A.no,
			A.qty,
			A.warehousein,
			A.warehouseout,
			A.order_no as "order.no",
			A.product_no as "product.no",
			B.name as "product.name",
			B.price as "product.price"
		from
			br_order_details A, product B
		where
			A.product_no = B.no
		and
			A.order_no = #{value}
	</select>
	
	<select id="getOrdersByRegDate" parameterType="map" resultType="BrOrder">
		select 
			no,
			regdate,
			note,
			branch_no as "branch.no",
			iscomplete,
			iscart
		from
			br_orders
		where
			branch_no = #{branchNo}
		and
			regdate between to_date('${date1}','YY-MM-DD')
			and to_date('${date2}', 'YY-MM-DD')+1
		order by regdate desc
	</select>
	
	<insert id="addBranchSales" parameterType="com.finalproject.model.BranchSales">
		insert into br_sales (no, regdate, ages, gender, issaled, isreturned, payment, br_employee_no, branch_no)
		values(mybranch_seq.nextval, sysdate, #{ages}, #{gender}, 'N', 'N', #{payment}, #{brEmp.no}, #{branch.no})
	</insert>
	
	<insert id="addBranchSalesDetail" parameterType="com.finalproject.model.BranchSalesDetail">
		insert into br_sales_detail (no, qty, br_sales_no, product_no)
		values(mybranch_seq.nextval, #{qty}, #{branchSales.no}, #{product.no})
	</insert>
	
	<update id="updateBranchSales" parameterType="com.finalproject.model.BranchSales">
		update br_sales
		set
			ages = #{ages},
			gender = #{gender},
			payment = #{payment},
			issaled = 'Y'
		where
			no = #{no}
	</update>
	
	<update id="updateBranchSalesDetail" parameterType="com.finalproject.model.BranchSalesDetail">
		update br_sales_detail
		set
			qty = #{qty}
		where
			no = #{no}
	</update>
	
	<select id="getBranchSalesByNotIsSaled" parameterType="map" resultType="com.finalproject.model.BranchSales">
		select
			no,
			regdate,
			ages,
			gender,
			issaled,
			isreturned,
			payment,
			br_employee_no as "brEmp.no",
			branch_no as "branch.no"
		from
			br_sales
		where
			br_employee_no = #{empNo}
			<if test="issaled == 'Y'">
			and issaled = 'Y'
			</if>			
			<if test="issaled == 'N'">
			and issaled = 'N'
			</if>
	</select>
	
	<!--  -->
	<select id="getBranchSalesDetailBySalesNo" parameterType="int" resultType="com.finalproject.model.BranchSalesDetail">
		select 
			A.no,
			A.qty,
			A.br_sales_no as "branchSales.no",
			A.product_no as "product.no",
			B.name as "product.name",
			B.price as "product.price"
		from
			br_sales_detail A, product B
		where
			A.product_no = B.no
		and
			A.br_sales_no = #{value}
	</select>
	
	<!-- 판매 : 지점번호로 지점정보 조회하기 -->
	<select id="getBranchByNo" parameterType="int" resultType="Branch">
		select
			no,
			employee_no,
			image,
			name,
			phone,
			address,
			atm,
			freshfood,
			lotto,
			parcelservice,
			lifeservice
		from
			branch
		where
			no = #{value}
	</select>
	
	<!-- 판매 : 지점회원번호로 지점회원 정보 조회하기 -->
	<select id="getBrEmpByNo" parameterType="int" resultType="BranchEmp">
		select
			no,
			email,
			address,
			phone,
			grade,
			password,
			name,
			retiredate,
			branch_no as "branch.no",
			images,
			birth
		from
			br_employees
		where
			no = #{value}
	</select>
	
	<!-- 행사물품 : 이벤트 코드로 물품 조회하기 -->
	<select id="getProductsByEventCode" parameterType="int" resultType="Product">
		select
			no,
			name,
			maker,
			price,
			eventcode,
			image			
		from
			product
		where
			eventcode = #{value}	
	</select>
	
	<!-- 행사물품 : 모든 이벤트 물품 조회하기 -->
	<select id="getAllEventProducts" resultType="Product">
		select
			no,
			name,
			maker,
			price,
			eventcode as "event.no",
			image			
		from
			product
		where
			eventcode = 1
		or 
			eventcode = 2 	
	</select>
	
	<!-- 사용자등록 : 아르바이트생 등록하기 -->
	<insert id="addBranchEmp" parameterType="BranchEmp">
		insert into 
			br_employees(no, email, address, phone, grade, password, name, branch_no, images, birth)
		values
			(mybranch_seq.nextval, #{email,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{grade,jdbcType=CHAR}, #{password,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{branch.no}, #{images,jdbcType=VARCHAR}, #{birth,jdbcType=DATE})
	</insert>
</mapper>